// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/register": {
            "post": {
                "description": "This endpoint registers a new user by their email address and sends a verification code to that email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration Info",
                        "name": "RequestRegister",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RequestRegister"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully, verification code sent",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseRegister"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters, such as incorrect email format",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseRegister"
                        }
                    },
                    "409": {
                        "description": "User already exists with the provided email address",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseRegister"
                        }
                    },
                    "500": {
                        "description": "Internal server error, such as failure in user creation or sending email",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseRegister"
                        }
                    }
                }
            }
        },
        "/verifycode": {
            "post": {
                "description": "Verifies the verification code sent by the user for account verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "verification"
                ],
                "summary": "Verify User Code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email address of the user",
                        "name": "email",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Verification code sent to the user's email",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification successful, includes access and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseSuccessVerifyCode"
                        }
                    },
                    "208": {
                        "description": "Email is already verified",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseStatusVerifyCode"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseStatusVerifyCode"
                        }
                    },
                    "401": {
                        "description": "Invalid verification code",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseStatusVerifyCode"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseStatusVerifyCode"
                        }
                    },
                    "429": {
                        "description": "Too many attempts, please try again later",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseStatusVerifyCode"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ResponseStatusVerifyCode"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.RequestRegister": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "@Required",
                    "type": "string"
                }
            }
        },
        "model.ResponseRegister": {
            "description": "The response payload returned after a user registers.",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message provides information about the registration outcome.\n@Required This field must be provided in the response.",
                    "type": "string"
                }
            }
        },
        "model.ResponseStatusVerifyCode": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message provides information about the response.",
                    "type": "string"
                }
            }
        },
        "model.ResponseSuccessVerifyCode": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "expiresIn": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
